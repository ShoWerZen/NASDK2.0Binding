kr/neolab/sdk/broadcastreceiver/BTDuplicateRemoveBroadcasterReceiver = KR.Neolab.Sdk.Broadcastreceiver.BTDuplicateRemoveBroadcasterReceiver
  <init>()V = .ctor()
  ACTION_BT_REQ_CONNECT = ActionBtReqConnect
  ACTION_BT_RESPONSE_CONNECTED = ActionBtResponseConnected
  EXTRA_BT_CONNECT_PACKAGENAME = ExtraBtConnectPackagename
  onReceive(Landroid/content/Context;Landroid/content/Intent;)V = OnReceive(Android.Content.Context, Android.Content.Intent)
kr/neolab/sdk/BuildConfig = KR.Neolab.Sdk.BuildConfig
  <init>()V = .ctor()
  APPLICATION_ID = ApplicationId
  BUILD_TYPE = BuildType
  DEBUG = Debug
  FLAVOR = Flavor
  VERSION_CODE = VersionCode
  VERSION_NAME = VersionName
kr/neolab/sdk/ink/structure/Dot = KR.Neolab.Sdk.Ink.Structure.Dot
  <init>(FFIIJIIIIIIIII)V = .ctor(float, float, int, int, long, int, int, int, int, int, int, int, int, int)
  <init>(Lkr/neolab/sdk/ink/structure/Dot;)V = .ctor(KR.Neolab.Sdk.Ink.Structure.Dot)
  color = Color
  CREATOR = Creator
  dotType = DotType
  noteId = NoteId
  ownerId = OwnerId
  pageId = PageId
  penTipType = PenTipType
  pressure = Pressure
  sectionId = SectionId
  tiltX = TiltX
  tiltY = TiltY
  timestamp = Timestamp
  twist = Twist
  x = X
  y = Y
  getDotType()I = DotType
  getPressure()I = Pressure
  getTimestamp()J = Timestamp
  describeContents()I = DescribeContents()
  getX()F = GetX()
  getY()F = GetY()
  makeDownDot(Lkr/neolab/sdk/ink/structure/Dot;)Lkr/neolab/sdk/ink/structure/Dot; = MakeDownDot(KR.Neolab.Sdk.Ink.Structure.Dot)
  makeUpDot(Lkr/neolab/sdk/ink/structure/Dot;)Lkr/neolab/sdk/ink/structure/Dot; = MakeUpDot(KR.Neolab.Sdk.Ink.Structure.Dot)
  toByteArray(I)[B = ToByteArray(int)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
kr/neolab/sdk/ink/structure/DotType = KR.Neolab.Sdk.Ink.Structure.DotType
  PEN_ACTION_DOWN = PenActionDown
  PEN_ACTION_MOVE = PenActionMove
  PEN_ACTION_UP = PenActionUp
  getValue()I = Value
  isPenActionDown(I)Z = IsPenActionDown(int)
  isPenActionMove(I)Z = IsPenActionMove(int)
  isPenActionUp(I)Z = IsPenActionUp(int)
  valueOf(Ljava/lang/String;)Lkr/neolab/sdk/ink/structure/DotType; = ValueOf(string)
  values()[Lkr/neolab/sdk/ink/structure/DotType; = Values()
kr/neolab/sdk/ink/structure/Stroke = KR.Neolab.Sdk.Ink.Structure.Stroke
  <init>(IIII)V = .ctor(int, int, int, int)
  <init>(IIIII)V = .ctor(int, int, int, int, int)
  <init>(IIIIII)V = .ctor(int, int, int, int, int, int)
  color = Color
  CREATOR = Creator
  noteId = NoteId
  ownerId = OwnerId
  pageId = PageId
  penTipType = PenTipType
  PEN_TIP_TYPE_ERASER = PenTipTypeEraser
  PEN_TIP_TYPE_NORMAL = PenTipTypeNormal
  sectionId = SectionId
  STROKE_TYPE_HIGHLIGHT = StrokeTypeHighlight
  STROKE_TYPE_NORMAL = StrokeTypeNormal
  STROKE_TYPE_PEN = StrokeTypePen
  thickness = Thickness
  timeStampEnd = TimeStampEnd
  timeStampStart = TimeStampStart
  type = Type
  getDots()Ljava/util/ArrayList; = Dots
  isReadOnly()Z = IsReadOnly
  getPath()Landroid/graphics/Path; = Path
  add(Lkr/neolab/sdk/ink/structure/Dot;)Z = Add(KR.Neolab.Sdk.Ink.Structure.Dot)
  changePos(FF)V = ChangePos(float, float)
  changeScale(F)V = ChangeScale(float)
  contains(Landroid/graphics/RectF;)Z = Contains(Android.Graphics.RectF)
  describeContents()I = DescribeContents()
  get(I)Lkr/neolab/sdk/ink/structure/Dot; = Get(int)
  getPressureArray()[S = GetPressureArray()
  getTimestampArray()[J = GetTimestampArray()
  getXArray()[F = GetXArray()
  getYArray()[F = GetYArray()
  intersect(Landroid/graphics/RectF;)Z = Intersect(Android.Graphics.RectF)
  size()I = Size()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
kr/neolab/sdk/metadata/IMetadataCtrl = KR.Neolab.Sdk.Metadata.IMetadataCtrl
  findApplicableSymbol(Ljava/lang/String;)Lkr/neolab/sdk/metadata/structure/Symbol; = FindApplicableSymbol(string)
  findApplicableSymbols(II)[Lkr/neolab/sdk/metadata/structure/Symbol; = FindApplicableSymbols(int, int)
  findApplicableSymbols(IIFF)[Lkr/neolab/sdk/metadata/structure/Symbol; = FindApplicableSymbols(int, int, float, float)
  findApplicableSymbols(Lkr/neolab/sdk/ink/structure/Stroke;)[Lkr/neolab/sdk/metadata/structure/Symbol; = FindApplicableSymbols(KR.Neolab.Sdk.Ink.Structure.Stroke)
  getExtraInfo(I)Ljava/lang/String; = GetExtraInfo(int)
  getKind(I)I = GetKind(int)
  getNoteTypeList(I)Ljava/util/ArrayList; = GetNoteTypeList(int)
  getOwnerCode(I)I = GetOwnerCode(int)
  getPageHeight(II)F = GetPageHeight(int, int)
  getPageHeightWithMargin(II)F = GetPageHeightWithMargin(int, int)
  getPageMarginBottom(II)F = GetPageMarginBottom(int, int)
  getPageMarginLeft(II)F = GetPageMarginLeft(int, int)
  getPageMarginRight(II)F = GetPageMarginRight(int, int)
  getPageMarginTop(II)F = GetPageMarginTop(int, int)
  getPageWidth(II)F = GetPageWidth(int, int)
  getPageWidthWithMargin(II)F = GetPageWidthWithMargin(int, int)
  getSectionCode(I)I = GetSectionCode(int)
  getSegments(III)[Lkr/neolab/sdk/metadata/structure/Segment; = GetSegments(int, int, int)
  getStartPage(I)I = GetStartPage(int)
  getSymbols()[Lkr/neolab/sdk/metadata/structure/Symbol; = GetSymbols()
  getTitle(I)Ljava/lang/String; = GetTitle(int)
  getTotalPages(I)I = GetTotalPages(int)
  loadFile(Ljava/io/File;)V = LoadFile(Java.IO.File)
  loadFiles(Ljava/lang/String;)V = LoadFiles(string)
  parseBySAX(Ljava/io/InputStream;)V = ParseBySAX(System.IO.Stream)
  parseByXmlPullParser(Ljava/io/InputStream;)V = ParseByXmlPullParser(System.IO.Stream)
  print()V = Print()
kr/neolab/sdk/metadata/MetadataCtrl = KR.Neolab.Sdk.Metadata.MetadataCtrl
  PIXEL_TO_DOT_SCALE = PixelToDotScale
  getInstance()Lkr/neolab/sdk/metadata/MetadataCtrl; = Instance
  findApplicableSymbol(Ljava/lang/String;)Lkr/neolab/sdk/metadata/structure/Symbol; = FindApplicableSymbol(string)
  findApplicableSymbols(II)[Lkr/neolab/sdk/metadata/structure/Symbol; = FindApplicableSymbols(int, int)
  findApplicableSymbols(IIFF)[Lkr/neolab/sdk/metadata/structure/Symbol; = FindApplicableSymbols(int, int, float, float)
  findApplicableSymbols(Lkr/neolab/sdk/ink/structure/Stroke;)[Lkr/neolab/sdk/metadata/structure/Symbol; = FindApplicableSymbols(KR.Neolab.Sdk.Ink.Structure.Stroke)
  getExtraInfo(I)Ljava/lang/String; = GetExtraInfo(int)
  getKind(I)I = GetKind(int)
  getNoteTypeList(I)Ljava/util/ArrayList; = GetNoteTypeList(int)
  getOwnerCode(I)I = GetOwnerCode(int)
  getPageHeight(II)F = GetPageHeight(int, int)
  getPageHeightWithMargin(II)F = GetPageHeightWithMargin(int, int)
  getPageMarginBottom(II)F = GetPageMarginBottom(int, int)
  getPageMarginLeft(II)F = GetPageMarginLeft(int, int)
  getPageMarginRight(II)F = GetPageMarginRight(int, int)
  getPageMarginTop(II)F = GetPageMarginTop(int, int)
  getPageWidth(II)F = GetPageWidth(int, int)
  getPageWidthWithMargin(II)F = GetPageWidthWithMargin(int, int)
  getSectionCode(I)I = GetSectionCode(int)
  getSegments(III)[Lkr/neolab/sdk/metadata/structure/Segment; = GetSegments(int, int, int)
  getStartPage(I)I = GetStartPage(int)
  getSymbols()[Lkr/neolab/sdk/metadata/structure/Symbol; = GetSymbols()
  getTitle(I)Ljava/lang/String; = GetTitle(int)
  getTotalPages(I)I = GetTotalPages(int)
  loadFile(Ljava/io/File;)V = LoadFile(Java.IO.File)
  loadFiles(Ljava/lang/String;)V = LoadFiles(string)
  parseBySAX(Ljava/io/InputStream;)V = ParseBySAX(System.IO.Stream)
  parseByXmlPullParser(Ljava/io/InputStream;)V = ParseByXmlPullParser(System.IO.Stream)
  print()V = Print()
kr/neolab/sdk/metadata/structure/Page = KR.Neolab.Sdk.Metadata.Structure.Page
  <init>()V = .ctor()
  angle = Angle
  height = Height
  margin_bottom = MarginBottom
  margin_left = MarginLeft
  margin_right = MarginRight
  margin_top = MarginTop
  noteId = NoteId
  pageId = PageId
  width = Width
kr/neolab/sdk/metadata/structure/Segment = KR.Neolab.Sdk.Metadata.Structure.Segment
  <init>(IIILjava/lang/String;IIIII)V = .ctor(int, int, int, string, int, int, int, int, int)
  mBook = MBook
  mEndPageNumber = MEndPageNumber
  mOwner = MOwner
  mPageSize = MPageSize
  mSection = MSection
  mSegmentNumber = MSegmentNumber
  mStartPageNumber = MStartPageNumber
  mSubCode = MSubCode
  mTotalPageSize = MTotalPageSize
kr/neolab/sdk/metadata/structure/Symbol = KR.Neolab.Sdk.Metadata.Structure.Symbol
  <init>(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;FFFF)V = .ctor(int, int, string, string, string, float, float, float, float)
  action = Action
  id = Id
  name = Name
  next = Next
  nextId = NextId
  noteId = NoteId
  pageId = PageId
  param = Param
  previous = Previous
  previousId = PreviousId
  getAction()Ljava/lang/String; = Action
  getHeight()F = Height
  getId()Ljava/lang/String; = Id
  getName()Ljava/lang/String; = Name
  getNext()Lkr/neolab/sdk/metadata/structure/Symbol; = Next
  getParam()Ljava/lang/String; = Param
  getPrevious()Lkr/neolab/sdk/metadata/structure/Symbol; = Previous
  getWidth()F = Width
  getX()F = GetX()
  getY()F = GetY()
kr/neolab/sdk/pen/bluetooth/BTAdt = KR.Neolab.Sdk.Pen.Bluetooth.BTAdt
  <init>()V = .ctor()
  ALLOWED_MAC_PREFIX = AllowedMacPrefix
  allowOffline = AllowOffline
  COD_20 = Cod20
  CONN_STATUS_AUTHORIZED = ConnStatusAuthorized
  CONN_STATUS_BINDED = ConnStatusBinded
  CONN_STATUS_ESTABLISHED = ConnStatusEstablished
  CONN_STATUS_IDLE = ConnStatusIdle
  CONN_STATUS_TRY = ConnStatusTry
  DENIED_MAC_PREFIX = DeniedMacPrefix
  isFreePass = IsFreePass
  NAME_PEN = NamePen
  penAddress = PenAddress
  penBtName = PenBtName
  QUEUE_DOT = QueueDot
  QUEUE_MSG = QueueMsg
  QUEUE_OFFLINE = QueueOffline
  getConnectedDevice()Ljava/lang/String; = ConnectedDevice
  getContext()Landroid/content/Context; = Context
  setContext(Landroid/content/Context;)V = Context
  getInstance()Lkr/neolab/sdk/pen/bluetooth/BTAdt; = Instance
  isConnected()Z = IsConnected
  getListener()Lkr/neolab/sdk/pen/penmsg/IPenMsgListener; = Listener
  setListener(Lkr/neolab/sdk/pen/penmsg/IPenMsgListener;)V = Listener
  getOffLineDataListener()Lkr/neolab/sdk/pen/penmsg/IOfflineDataListener; = OffLineDataListener
  setOffLineDataListener(Lkr/neolab/sdk/pen/penmsg/IOfflineDataListener;)V = OffLineDataListener
  getProtocolVersion()I = ProtocolVersion
  connect(Ljava/lang/String;)V = Connect(string)
  connect(Ljava/lang/String;Z)V = Connect(string, bool)
  disconnect()V = Disconnect()
  endup()V = Endup()
  inputPassword(Ljava/lang/String;)V = InputPassword(string)
  isAvailableDevice(Ljava/lang/String;)Z = IsAvailableDevice(string)
  removeOfflineData(II)V = RemoveOfflineData(int, int)
  removeOfflineData(II[I)V = RemoveOfflineData(int, int, int[])
  reqAddUsingNote(II)V = ReqAddUsingNote(int, int)
  reqAddUsingNote(II[I)V = ReqAddUsingNote(int, int, int[])
  reqAddUsingNote([I[I)V = ReqAddUsingNote(int[], int[])
  reqAddUsingNote(Ljava/util/ArrayList;)V = ReqAddUsingNote(System.Collections.Generic.IList<KR.Neolab.Sdk.Util.UseNoteData>)
  reqAddUsingNoteAll()V = ReqAddUsingNoteAll()
  reqForceCalibrate()V = ReqForceCalibrate()
  reqFwUpgrade(Ljava/io/File;Ljava/lang/String;)V = ReqFwUpgrade(Java.IO.File, string)
  reqFwUpgrade2(Ljava/io/File;Ljava/lang/String;)V = ReqFwUpgrade2(Java.IO.File, string)
  reqOfflineData(III)V = ReqOfflineData(int, int, int)
  reqOfflineData(III[I)V = ReqOfflineData(int, int, int, int[])
  reqOfflineDataList()V = ReqOfflineDataList()
  reqOfflineDataList(II)V = ReqOfflineDataList(int, int)
  reqOfflineDataPageList(III)V = ReqOfflineDataPageList(int, int, int)
  reqPenStatus()V = ReqPenStatus()
  reqSetupAutoPowerOnOff(Z)V = ReqSetupAutoPowerOnOff(bool)
  reqSetupAutoShutdownTime(S)V = ReqSetupAutoShutdownTime(short)
  reqSetupPassword(Ljava/lang/String;Ljava/lang/String;)V = ReqSetupPassword(string, string)
  reqSetUpPasswordOff(Ljava/lang/String;)V = ReqSetUpPasswordOff(string)
  reqSetupPenBeepOnOff(Z)V = ReqSetupPenBeepOnOff(bool)
  reqSetupPenCapOff(Z)V = ReqSetupPenCapOff(bool)
  reqSetupPenHover(Z)V = ReqSetupPenHover(bool)
  reqSetupPenSensitivity(S)V = ReqSetupPenSensitivity(short)
  reqSetupPenTipColor(I)V = ReqSetupPenTipColor(int)
  reqSuspendFwUpgrade()V = ReqSuspendFwUpgrade()
  setAllowOfflineData(Z)V = SetAllowOfflineData(bool)
  setDotListener(Lkr/neolab/sdk/pen/penmsg/IPenDotListener;)V = SetDotListener(KR.Neolab.Sdk.Pen.Penmsg.IPenDotListener)
  setOfflineDataLocation(Ljava/lang/String;)V = SetOfflineDataLocation(string)
  startListen()V = StartListen()
kr/neolab/sdk/pen/bluetooth/cmd/Command = KR.Neolab.Sdk.Pen.Bluetooth.Cmd.Command
  <init>(ILkr/neolab/sdk/pen/bluetooth/cmd/CommandManager;)V = .ctor(int, KR.Neolab.Sdk.Pen.Bluetooth.Cmd.CommandManager)
  comp = Comp
  isAlive = IsAlive
  getId()I = Id
  isAlive()Z = IsAlive
  excute()V = Excute()
  finish()V = Finish()
  run()V = Run()
  write()V = Write()
kr/neolab/sdk/pen/bluetooth/cmd/CommandManager = KR.Neolab.Sdk.Pen.Bluetooth.Cmd.CommandManager
  <init>()V = .ctor()
  commands = Commands
  rQueue = RQueue
  getConn()Lkr/neolab/sdk/pen/bluetooth/BTAdt$ConnectedThread; = Conn
  execute(Lkr/neolab/sdk/pen/bluetooth/cmd/ICommand;)V = Execute(KR.Neolab.Sdk.Pen.Bluetooth.Cmd.ICommand)
  fill([BI)V = Fill(byte[], int)
  finishUpgrade()V = FinishUpgrade()
  kill(I)V = Kill(int)
  reqAddUsingNote(II)V = ReqAddUsingNote(int, int)
  reqAddUsingNote(II[I)V = ReqAddUsingNote(int, int, int[])
  reqAddUsingNote([I[I)V = ReqAddUsingNote(int[], int[])
  reqAddUsingNoteAll()V = ReqAddUsingNoteAll()
  reqAutoPowerSetupOnOff(Z)V = ReqAutoPowerSetupOnOff(bool)
  reqForceCalibrate()V = ReqForceCalibrate()
  reqInputPassword(Ljava/lang/String;)V = ReqInputPassword(string)
  reqOfflineData(III)V = ReqOfflineData(int, int, int)
  reqOfflineDataList()V = ReqOfflineDataList()
  reqPenBeepSetup(Z)V = ReqPenBeepSetup(bool)
  reqPenStatus()V = ReqPenStatus()
  reqPenSwUpgrade(Ljava/io/File;Ljava/lang/String;)V = ReqPenSwUpgrade(Java.IO.File, string)
  reqSetAutoShutdownTime(S)V = ReqSetAutoShutdownTime(short)
  reqSetPenSensitivity(S)V = ReqSetPenSensitivity(short)
  reqSetUpPassword(Ljava/lang/String;Ljava/lang/String;)V = ReqSetUpPassword(string, string)
  reqSetupPenTipColor(I)V = ReqSetupPenTipColor(int)
  reqSuspendPenSwUpgrade()V = ReqSuspendPenSwUpgrade()
  setChunk(Lkr/neolab/sdk/pen/bluetooth/lib/Chunk;)V = SetChunk(KR.Neolab.Sdk.Pen.Bluetooth.Lib.Chunk)
  write([B)V = Write(byte[])
kr/neolab/sdk/pen/bluetooth/cmd/EstablishCommand = KR.Neolab.Sdk.Pen.Bluetooth.Cmd.EstablishCommand
  <init>(ILkr/neolab/sdk/pen/bluetooth/cmd/CommandManager;)V = .ctor(int, KR.Neolab.Sdk.Pen.Bluetooth.Cmd.CommandManager)
  write()V = Write()
kr/neolab/sdk/pen/bluetooth/cmd/ForceCalibrateCommand = KR.Neolab.Sdk.Pen.Bluetooth.Cmd.ForceCalibrateCommand
  <init>(ILkr/neolab/sdk/pen/bluetooth/cmd/CommandManager;)V = .ctor(int, KR.Neolab.Sdk.Pen.Bluetooth.Cmd.CommandManager)
  write()V = Write()
kr/neolab/sdk/pen/bluetooth/cmd/FwUpgradeCommand = KR.Neolab.Sdk.Pen.Bluetooth.Cmd.FwUpgradeCommand
  <init>(ILkr/neolab/sdk/pen/bluetooth/cmd/CommandManager;)V = .ctor(int, KR.Neolab.Sdk.Pen.Bluetooth.Cmd.CommandManager)
  rQueue = RQueue
  setInfo(Ljava/io/File;Ljava/lang/String;)V = SetInfo(Java.IO.File, string)
  write()V = Write()
kr/neolab/sdk/pen/bluetooth/cmd/FwUpgradeCommand20 = KR.Neolab.Sdk.Pen.Bluetooth.Cmd.FwUpgradeCommand20
  <init>(ILkr/neolab/sdk/pen/bluetooth/cmd/CommandManager;)V = .ctor(int, KR.Neolab.Sdk.Pen.Bluetooth.Cmd.CommandManager)
  PACKET_SIZE = PacketSize
  setInfo(Ljava/io/File;Ljava/lang/String;Ljava/lang/String;)V = SetInfo(Java.IO.File, string, string)
  write()V = Write()
kr/neolab/sdk/pen/bluetooth/cmd/ICommand = KR.Neolab.Sdk.Pen.Bluetooth.Cmd.ICommand
  getId()I = Id
  isAlive()Z = IsAlive
  excute()V = Excute()
  finish()V = Finish()
kr/neolab/sdk/pen/bluetooth/cmd/PenStatusCommand = KR.Neolab.Sdk.Pen.Bluetooth.Cmd.PenStatusCommand
  <init>(ILkr/neolab/sdk/pen/bluetooth/cmd/CommandManager;)V = .ctor(int, KR.Neolab.Sdk.Pen.Bluetooth.Cmd.CommandManager)
  write()V = Write()
kr/neolab/sdk/pen/bluetooth/cmd/ResPenOnOffCommand = KR.Neolab.Sdk.Pen.Bluetooth.Cmd.ResPenOnOffCommand
  <init>(ILkr/neolab/sdk/pen/bluetooth/cmd/CommandManager;)V = .ctor(int, KR.Neolab.Sdk.Pen.Bluetooth.Cmd.CommandManager)
  setStatus(Z)V = SetStatus(bool)
  write()V = Write()
kr/neolab/sdk/pen/bluetooth/cmd/SetTimeCommand = KR.Neolab.Sdk.Pen.Bluetooth.Cmd.SetTimeCommand
  <init>(ILkr/neolab/sdk/pen/bluetooth/cmd/CommandManager;)V = .ctor(int, KR.Neolab.Sdk.Pen.Bluetooth.Cmd.CommandManager)
  write()V = Write()
kr/neolab/sdk/pen/bluetooth/cmd/ShowTextCommand = KR.Neolab.Sdk.Pen.Bluetooth.Cmd.ShowTextCommand
  <init>(ILkr/neolab/sdk/pen/bluetooth/cmd/CommandManager;)V = .ctor(int, KR.Neolab.Sdk.Pen.Bluetooth.Cmd.CommandManager)
  setStatus(Ljava/lang/String;)V = SetStatus(string)
  write()V = Write()
kr/neolab/sdk/pen/bluetooth/comm/CommProcessor = KR.Neolab.Sdk.Pen.Bluetooth.Comm.CommProcessor
  <init>(Lkr/neolab/sdk/pen/bluetooth/BTAdt$ConnectedThread;)V = .ctor(KR.Neolab.Sdk.Pen.Bluetooth.BTAdt.ConnectedThread)
  isUpgrading = IsUpgrading
  isUpgradingSuspended = IsUpgradingSuspended
  olFile = OlFile
  getChunk()Lkr/neolab/sdk/pen/bluetooth/lib/Chunk; = Chunk
  getConn()Lkr/neolab/sdk/pen/bluetooth/BTAdt$ConnectedThread; = Conn
  checkEstablish()V = CheckEstablish()
  fill([BI)V = Fill(byte[], int)
  finishUpgrade()V = FinishUpgrade()
  onCreatePacket(Lkr/neolab/sdk/pen/bluetooth/lib/Packet;)V = OnCreatePacket(KR.Neolab.Sdk.Pen.Bluetooth.Lib.Packet)
  onFilteredDot(Lkr/neolab/sdk/pen/filter/Fdot;)V = OnFilteredDot(KR.Neolab.Sdk.Pen.Filter.Fdot)
  reqAddUsingNote(II)V = ReqAddUsingNote(int, int)
  reqAddUsingNote(II[I)V = ReqAddUsingNote(int, int, int[])
  reqAddUsingNote([I[I)V = ReqAddUsingNote(int[], int[])
  reqAddUsingNoteAll()V = ReqAddUsingNoteAll()
  reqAutoPowerSetupOnOff(Z)V = ReqAutoPowerSetupOnOff(bool)
  reqForceCalibrate()V = ReqForceCalibrate()
  reqInputPassword(Ljava/lang/String;)V = ReqInputPassword(string)
  reqOfflineData(III)V = ReqOfflineData(int, int, int)
  reqOfflineDataList()V = ReqOfflineDataList()
  reqOfflineDataRemove(II)V = ReqOfflineDataRemove(int, int)
  reqPenBeepSetup(Z)V = ReqPenBeepSetup(bool)
  reqPenStatus()V = ReqPenStatus()
  reqPenSwUpgrade(Ljava/io/File;Ljava/lang/String;)V = ReqPenSwUpgrade(Java.IO.File, string)
  reqSetAutoShutdownTime(S)V = ReqSetAutoShutdownTime(short)
  reqSetPenSensitivity(S)V = ReqSetPenSensitivity(short)
  reqSetUpPassword(Ljava/lang/String;Ljava/lang/String;)V = ReqSetUpPassword(string, string)
  reqSetupPenTipColor(I)V = ReqSetupPenTipColor(int)
  reqSuspendPenSwUpgrade()V = ReqSuspendPenSwUpgrade()
  resPenSwRequest(I)V = ResPenSwRequest(int)
  resPenSwUpgStatus(I)V = ResPenSwUpgStatus(int)
  setChunk(Lkr/neolab/sdk/pen/bluetooth/lib/Chunk;)V = SetChunk(KR.Neolab.Sdk.Pen.Bluetooth.Lib.Chunk)
  write([B)V = Write(byte[])
kr/neolab/sdk/pen/bluetooth/comm/CommProcessor20 = KR.Neolab.Sdk.Pen.Bluetooth.Comm.CommProcessor20
  <init>(Lkr/neolab/sdk/pen/bluetooth/BTAdt$ConnectedThread;Ljava/lang/String;)V = .ctor(KR.Neolab.Sdk.Pen.Bluetooth.BTAdt.ConnectedThread, string)
  isUpgrading = IsUpgrading
  isUpgradingSuspended = IsUpgradingSuspended
  rQueue = RQueue
  getChunk()Lkr/neolab/sdk/pen/bluetooth/lib/Chunk; = Chunk
  getConn()Lkr/neolab/sdk/pen/bluetooth/BTAdt$ConnectedThread; = Conn
  fill([BI)V = Fill(byte[], int)
  finishOfflineData()V = FinishOfflineData()
  finishUpgrade()V = FinishUpgrade()
  onCreatePacket(Lkr/neolab/sdk/pen/bluetooth/lib/Packet;)V = OnCreatePacket(KR.Neolab.Sdk.Pen.Bluetooth.Lib.Packet)
  onFilteredDot(Lkr/neolab/sdk/pen/filter/Fdot;)V = OnFilteredDot(KR.Neolab.Sdk.Pen.Filter.Fdot)
  reqAddUsingNote(II)V = ReqAddUsingNote(int, int)
  reqAddUsingNote(II[I)V = ReqAddUsingNote(int, int, int[])
  reqAddUsingNote([I[I)V = ReqAddUsingNote(int[], int[])
  reqAddUsingNote(Ljava/util/ArrayList;)V = ReqAddUsingNote(System.Collections.Generic.IList<KR.Neolab.Sdk.Util.UseNoteData>)
  reqAddUsingNoteAll()V = ReqAddUsingNoteAll()
  reqAutoPowerSetupOnOff(Z)V = ReqAutoPowerSetupOnOff(bool)
  reqForceCalibrate()V = ReqForceCalibrate()
  reqInputPassword(Ljava/lang/String;)V = ReqInputPassword(string)
  reqOfflineData(III)V = ReqOfflineData(int, int, int)
  reqOfflineData(III[I)V = ReqOfflineData(int, int, int, int[])
  reqOfflineDataList()V = ReqOfflineDataList()
  reqOfflineDataList(II)V = ReqOfflineDataList(int, int)
  reqOfflineDataPageList(III)V = ReqOfflineDataPageList(int, int, int)
  reqOfflineDataRemove(II[I)V = ReqOfflineDataRemove(int, int, int[])
  reqPenBeepSetup(Z)V = ReqPenBeepSetup(bool)
  reqPenInfo(Z)V = ReqPenInfo(bool)
  reqPenStatus()V = ReqPenStatus()
  reqPenSwUpgrade(Ljava/io/File;Ljava/lang/String;)V = ReqPenSwUpgrade(Java.IO.File, string)
  reqSetAutoShutdownTime(S)V = ReqSetAutoShutdownTime(short)
  reqSetPenCapOnOff(Z)V = ReqSetPenCapOnOff(bool)
  reqSetPenHover(Z)V = ReqSetPenHover(bool)
  reqSetPenSensitivity(S)V = ReqSetPenSensitivity(short)
  reqSetUpPassword(Ljava/lang/String;Ljava/lang/String;)V = ReqSetUpPassword(string, string)
  reqSetUpPasswordOff(Ljava/lang/String;)V = ReqSetUpPasswordOff(string)
  reqSetupPenOfflineDataSave(Z)V = ReqSetupPenOfflineDataSave(bool)
  reqSetupPenTipColor(I)V = ReqSetupPenTipColor(int)
  reqSuspendPenSwUpgrade()V = ReqSuspendPenSwUpgrade()
  resPenSwRequest(II)V = ResPenSwRequest(int, int)
  resPenSwUpgStatus(I)V = ResPenSwUpgStatus(int)
  resPenSwUpgStatus(II)V = ResPenSwUpgStatus(int, int)
  setChunk(Lkr/neolab/sdk/pen/bluetooth/lib/Chunk;)V = SetChunk(KR.Neolab.Sdk.Pen.Bluetooth.Lib.Chunk)
  write([B)V = Write(byte[])
kr/neolab/sdk/pen/bluetooth/lib/ByteConverter = KR.Neolab.Sdk.Pen.Bluetooth.Lib.ByteConverter
  <init>()V = .ctor()
  byteArrayToHexString([BI)Ljava/lang/String; = ByteArrayToHexString(byte[], int)
  byteArrayToInt([B)I = ByteArrayToInt(byte[])
  byteArrayToLong([B)J = ByteArrayToLong(byte[])
  byteArrayToShort([B)S = ByteArrayToShort(byte[])
  charArrayTobyte([C)[B = CharArrayTobyte(char[])
  intTobyte(I)[B = IntTobyte(int)
  longTobyte(J)[B = LongTobyte(long)
  shortTobyte(S)[B = ShortTobyte(short)
  stringTobyte(Ljava/lang/String;)[B = StringTobyte(string)
kr/neolab/sdk/pen/bluetooth/lib/Chunk = KR.Neolab.Sdk.Pen.Bluetooth.Lib.Chunk
  <init>(Ljava/io/InputStream;J)V = .ctor(System.IO.Stream, long)
  <init>(Ljava/io/InputStream;JI)V = .ctor(System.IO.Stream, long, int)
  size = Size
  getChecksum()B = Checksum
  getChunkLength()I = ChunkLength
  getChunksize()I = Chunksize
  getStatus()I = Status
  getStatusPercent()I = StatusPercent
  calcChecksum([B)B = CalcChecksum(byte[])
  calcChecksum([[B)B = CalcChecksum(byte[][])
  getChecksum(I)B = GetChecksum(int)
  getChunk(I)[B = GetChunk(int)
  load()V = Load()
  offsetToIndex(I)I = OffsetToIndex(int)
  setStatus(IZ)V = SetStatus(int, bool)
kr/neolab/sdk/pen/bluetooth/lib/CMD = KR.Neolab.Sdk.Pen.Bluetooth.Lib.CMD
  <init>()V = .ctor()
  A_AlarmResponse = AAlarmResponse
  A_AutoPowerOnResponse = AAutoPowerOnResponse
  A_AutoShutdownTimeResponse = AAutoShutdownTimeResponse
  A_BeepSetResponse = ABeepSetResponse
  A_DotData = ADotData
  A_DotIDChange = ADotIDChange
  A_DotIDChange32 = ADotIDChange32
  A_DotUpDownData = ADotUpDownData
  A_DotUpDownDataNew = ADotUpDownDataNew
  A_Echo = AEcho
  A_ForceCalibrateResponse = AForceCalibrateResponse
  A_OfflineChunk = AOfflineChunk
  A_OfflineDataInfo = AOfflineDataInfo
  A_OfflineDataRemoveResponse = AOfflineDataRemoveResponse
  A_OfflineInfo = AOfflineInfo
  A_OfflineNoteListResponse = AOfflineNoteListResponse
  A_OfflineResultResponse = AOfflineResultResponse
  A_PasswordRequest = APasswordRequest
  A_PasswordSetResponse = APasswordSetResponse
  A_PenColorSetResponse = APenColorSetResponse
  A_PenDebug = APenDebug
  A_PenOnState = APenOnState
  A_PenSensitivityResponse = APenSensitivityResponse
  A_PenStatusResponse = APenStatusResponse
  A_PenStatusSetupResponse = APenStatusSetupResponse
  A_PenSWUpgradeRequest = APenSWUpgradeRequest
  A_PenSWUpgradeStatus = APenSWUpgradeStatus
  A_RTCsetResponse = ARTCsetResponse
  A_UsingNoteNotifyResponse = AUsingNoteNotifyResponse
  P_Alarmset = PAlarmset
  P_AutoPowerOnSet = PAutoPowerOnSet
  P_AutoShutdownTime = PAutoShutdownTime
  P_BeepSet = PBeepSet
  P_DotUpDownResponse = PDotUpDownResponse
  P_EchoResponse = PEchoResponse
  P_ForceCalibrate = PForceCalibrate
  P_OfflineChunkResponse = POfflineChunkResponse
  P_OfflineDataRemove = POfflineDataRemove
  P_OfflineDataRequest = POfflineDataRequest
  P_OfflineInfoResponse = POfflineInfoResponse
  P_OfflineNoteList = POfflineNoteList
  P_PasswordResponse = PPasswordResponse
  P_PasswordSet = PPasswordSet
  P_PenColorSet = PPenColorSet
  P_PenOnResponse = PPenOnResponse
  P_PenSensitivity = PPenSensitivity
  P_PenStatusRequest = PPenStatusRequest
  P_PenStatusSetup = PPenStatusSetup
  P_PenSWUpgradeCommand = PPenSWUpgradeCommand
  P_PenSWUpgradeResponse = PPenSWUpgradeResponse
  P_RTCset = PRTCset
  P_ShowText = PShowText
  P_UsingNoteNotify = PUsingNoteNotify
kr/neolab/sdk/pen/bluetooth/lib/CMD20 = KR.Neolab.Sdk.Pen.Bluetooth.Lib.CMD20
  <init>()V = .ctor()
  ACK_OfflineChunk = ACKOfflineChunk
  ACK_UploadPenFWChunk = ACKUploadPenFWChunk
  REQ_OfflineDataRequest = REQOfflineDataRequest
  REQ_OfflineNoteList = REQOfflineNoteList
  REQ_OfflineNoteRemove = REQOfflineNoteRemove
  REQ_OfflinePageList = REQOfflinePageList
  REQ_Password = REQPassword
  REQ_PasswordSet = REQPasswordSet
  REQ_PenFWUpgrade = REQPenFWUpgrade
  REQ_PenInfo = REQPenInfo
  REQ_PenStatus = REQPenStatus
  REQ_PenStatusChange = REQPenStatusChange
  REQ_PenStatusChange_TYPE_AutoPowerOnSet = REQPenStatusChangeTYPEAutoPowerOnSet
  REQ_PenStatusChange_TYPE_AutoShutdownTime = REQPenStatusChangeTYPEAutoShutdownTime
  REQ_PenStatusChange_TYPE_BeepOnOff = REQPenStatusChangeTYPEBeepOnOff
  REQ_PenStatusChange_TYPE_CurrentTimeSet = REQPenStatusChangeTYPECurrentTimeSet
  REQ_PenStatusChange_TYPE_HoverOnOff = REQPenStatusChangeTYPEHoverOnOff
  REQ_PenStatusChange_TYPE_LEDColorSet = REQPenStatusChangeTYPELEDColorSet
  REQ_PenStatusChange_TYPE_OfflineDataSaveOnOff = REQPenStatusChangeTYPEOfflineDataSaveOnOff
  REQ_PenStatusChange_TYPE_PenCapOnOff = REQPenStatusChangeTYPEPenCapOnOff
  REQ_PenStatusChange_TYPE_SensitivitySet = REQPenStatusChangeTYPESensitivitySet
  REQ_UsingNoteNotify = REQUsingNoteNotify
  RES_EventBattery = RESEventBattery
  RES_EventDotData = RESEventDotData
  RES_EventIdChange = RESEventIdChange
  RES_EventPenUpDown = RESEventPenUpDown
  RES_EventPowerOff = RESEventPowerOff
  RES_EventUploadPenFWChunk = RESEventUploadPenFWChunk
  RES_OfflineChunk = RESOfflineChunk
  RES_OfflineDataRequest = RESOfflineDataRequest
  RES_OfflineNoteList = RESOfflineNoteList
  RES_OfflineNoteRemove = RESOfflineNoteRemove
  RES_OfflinePageList = RESOfflinePageList
  RES_Password = RESPassword
  RES_PasswordSet = RESPasswordSet
  RES_PenFWUpgrade = RESPenFWUpgrade
  RES_PenInfo = RESPenInfo
  RES_PenStatus = RESPenStatus
  RES_PenStatusChange = RESPenStatusChange
  RES_UsingNoteNotify = RESUsingNoteNotify
  isEventCMD(B)Z = IsEventCMD(sbyte)
  isEventCMD(I)Z = IsEventCMD(int)
kr/neolab/sdk/pen/bluetooth/lib/Packet = KR.Neolab.Sdk.Pen.Bluetooth.Lib.Packet
  <init>()V = .ctor()
  <init>([B)V = .ctor(byte[])
  <init>([BI)V = .ctor(byte[], int)
  <init>([BIZ)V = .ctor(byte[], int, bool)
  checkSum = CheckSum
  cmd = Cmd
  data = Data
  dataLength = DataLength
  isEvent = IsEvent
  resultCode = ResultCode
  getCmd()I = Cmd
  getDataLength()I = DataLength
  getResultCode()B = ResultCode
  copyOfRange([BII)[B = CopyOfRange(byte[], int, int)
  getData()[B = GetData()
  getDataRange(II)[B = GetDataRange(int, int)
  getDataRangeInt(II)I = GetDataRangeInt(int, int)
  getDataRangeLong(II)J = GetDataRangeLong(int, int)
  getDataRangeShort(II)S = GetDataRangeShort(int, int)
  getDataRangeString(II)Ljava/lang/String; = GetDataRangeString(int, int)
kr/neolab/sdk/pen/bluetooth/lib/ProtocolNotSupportedException = KR.Neolab.Sdk.Pen.Bluetooth.Lib.ProtocolNotSupportedException
  <init>(Ljava/lang/String;)V = .ctor(string)
kr/neolab/sdk/pen/bluetooth/lib/ProtocolParser = KR.Neolab.Sdk.Pen.Bluetooth.Lib.ProtocolParser
  <init>(Lkr/neolab/sdk/pen/bluetooth/lib/ProtocolParser$IParsedPacketListener;)V = .ctor(KR.Neolab.Sdk.Pen.Bluetooth.Lib.ProtocolParser.IParsedPacketListener)
  USING_NOTE_TYPE_ALL = UsingNoteTypeAll
  USING_NOTE_TYPE_NOTE = UsingNoteTypeNote
  USING_NOTE_TYPE_SECTION_OWNER = UsingNoteTypeSectionOwner
  buildAddUsingAllNotes()[B = BuildAddUsingAllNotes()
  buildAddUsingNotes(II)[B = BuildAddUsingNotes(int, int)
  buildAddUsingNotes(II[I)[B = BuildAddUsingNotes(int, int, int[])
  buildAutoShutdownTimeSetup(S)[B = BuildAutoShutdownTimeSetup(short)
  buildForceCalibrateData()[B = BuildForceCalibrateData()
  buildOfflineChunkResponse(I)[B = BuildOfflineChunkResponse(int)
  buildOfflineInfoResponse(Z)[B = BuildOfflineInfoResponse(bool)
  buildPasswordInput(Ljava/lang/String;)[B = BuildPasswordInput(string)
  buildPasswordSetup(Ljava/lang/String;Ljava/lang/String;)[B = BuildPasswordSetup(string, string)
  buildPenAutoPowerSetup(Z)[B = BuildPenAutoPowerSetup(bool)
  buildPenBeepSetup(Z)[B = BuildPenBeepSetup(bool)
  buildPenEchoResponse(B)[B = BuildPenEchoResponse(sbyte)
  buildPenOnOffData(Z)[B = BuildPenOnOffData(bool)
  buildPenSensitivitySetup(S)[B = BuildPenSensitivitySetup(short)
  buildPenStatusData()[B = BuildPenStatusData()
  buildPenSwUpgrade(Ljava/lang/String;ISS)[B = BuildPenSwUpgrade(string, int, short, short)
  buildPenSwUpgradeResponse(IB[B)[B = BuildPenSwUpgradeResponse(int, sbyte, byte[])
  buildPenTipColorSetup(I)[B = BuildPenTipColorSetup(int)
  buildPenUpRespnse(J)[B = BuildPenUpRespnse(long)
  buildReqOfflineData(III)[B = BuildReqOfflineData(int, int, int)
  buildReqOfflineDataList()[B = BuildReqOfflineDataList()
  buildReqOfflineDataRemove(II)[B = BuildReqOfflineDataRemove(int, int)
  buildSetCurrentTimeData()[B = BuildSetCurrentTimeData()
  buildShowTextData(Ljava/lang/String;)[B = BuildShowTextData(string)
  getLocalTimeOffset(J)I = GetLocalTimeOffset(long)
  parseByteData([BI)V = ParseByteData(byte[], int)
kr/neolab/sdk/pen/bluetooth/lib/ProtocolParser20 = KR.Neolab.Sdk.Pen.Bluetooth.Lib.ProtocolParser20
  <init>(Lkr/neolab/sdk/pen/bluetooth/lib/ProtocolParser20$IParsedPacketListener;)V = .ctor(KR.Neolab.Sdk.Pen.Bluetooth.Lib.ProtocolParser20.IParsedPacketListener)
  PKT_DLE = PktDle
  PKT_RESULT_FAIL = PktResultFail
  PKT_RESULT_FAIL2 = PktResultFail2
  PKT_RESULT_SUCCESS = PktResultSuccess
  buildAddUsingAllNotes()[B = BuildAddUsingAllNotes()
  buildAddUsingNotes(II)[B = BuildAddUsingNotes(int, int)
  buildAddUsingNotes([I[I)[B = BuildAddUsingNotes(int[], int[])
  buildAddUsingNotes(Ljava/util/ArrayList;)[B = BuildAddUsingNotes(System.Collections.Generic.IList<KR.Neolab.Sdk.Util.UseNoteData>)
  buildAutoShutdownTimeSetup(S)[B = BuildAutoShutdownTimeSetup(short)
  buildOfflineChunkResponse(III)[B = BuildOfflineChunkResponse(int, int, int)
  buildPasswordInput(Ljava/lang/String;)[B = BuildPasswordInput(string)
  buildPasswordSetup(ZLjava/lang/String;Ljava/lang/String;)[B = BuildPasswordSetup(bool, string, string)
  buildPenAutoPowerSetup(Z)[B = BuildPenAutoPowerSetup(bool)
  buildPenBeepSetup(Z)[B = BuildPenBeepSetup(bool)
  buildPenCapOnOffSetup(Z)[B = BuildPenCapOnOffSetup(bool)
  buildPenHoverSetup(Z)[B = BuildPenHoverSetup(bool)
  buildPenOfflineDataSaveSetup(Z)[B = BuildPenOfflineDataSaveSetup(bool)
  buildPenSensitivitySetup(S)[B = BuildPenSensitivitySetup(short)
  buildPenStatusData()[B = BuildPenStatusData()
  buildPenSwUpgrade(Ljava/lang/String;Ljava/lang/String;IB)[B = BuildPenSwUpgrade(string, string, int, sbyte)
  buildPenSwUploadChunk(I[BIZ)[B = BuildPenSwUploadChunk(int, byte[], int, bool)
  buildPenTipColorSetup(I)[B = BuildPenTipColorSetup(int)
  buildReqOfflineData(III)[B = BuildReqOfflineData(int, int, int)
  buildReqOfflineData(III[I)[B = BuildReqOfflineData(int, int, int, int[])
  buildReqOfflineDataList(II)[B = BuildReqOfflineDataList(int, int)
  buildReqOfflineDataListAll()[B = BuildReqOfflineDataListAll()
  buildReqOfflineDataPageList(III)[B = BuildReqOfflineDataPageList(int, int, int)
  buildReqOfflineDataRemove(II[I)[B = BuildReqOfflineDataRemove(int, int, int[])
  buildReqPenInfo(Ljava/lang/String;Ljava/lang/String;)[B = BuildReqPenInfo(string, string)
  buildSetCurrentTimeData()[B = BuildSetCurrentTimeData()
  parseByteData([BI)V = ParseByteData(byte[], int)
kr/neolab/sdk/pen/filter/Fdot = KR.Neolab.Sdk.Pen.Filter.Fdot
  <init>(FFIIJIIIIIIIII)V = .ctor(float, float, int, int, long, int, int, int, int, int, int, int, int, int)
  CREATOR = Creator
  DOT_DATA_BYTE_ALIGN = DotDataByteAlign
  DOT_DATA_COMPACT_BYTE_ALIGN = DotDataCompactByteAlign
  mac_address = MacAddress
  toByteArray()[B = ToByteArray()
  toCompactByteArray()[B = ToCompactByteArray()
  toDot()Lkr/neolab/sdk/ink/structure/Dot; = ToDot()
  ToString()Ljava/lang/String; = ToString()
kr/neolab/sdk/pen/filter/FilterForFilm = KR.Neolab.Sdk.Pen.Filter.FilterForFilm
  <init>(Lkr/neolab/sdk/pen/filter/IFilterListener;)V = .ctor(KR.Neolab.Sdk.Pen.Filter.IFilterListener)
  put(Lkr/neolab/sdk/pen/filter/Fdot;)V = Put(KR.Neolab.Sdk.Pen.Filter.Fdot)
kr/neolab/sdk/pen/filter/FilterForPaper = KR.Neolab.Sdk.Pen.Filter.FilterForPaper
  <init>(Lkr/neolab/sdk/pen/filter/IFilterListener;)V = .ctor(KR.Neolab.Sdk.Pen.Filter.IFilterListener)
  put(Lkr/neolab/sdk/pen/filter/Fdot;)V = Put(KR.Neolab.Sdk.Pen.Filter.Fdot)
kr/neolab/sdk/pen/filter/IFilterListener = KR.Neolab.Sdk.Pen.Filter.IFilterListener
  onFilteredDot(Lkr/neolab/sdk/pen/filter/Fdot;)V = OnFilteredDot(KR.Neolab.Sdk.Pen.Filter.Fdot)
kr/neolab/sdk/pen/IPenAdt = KR.Neolab.Sdk.Pen.IPenAdt
  getConnectedDevice()Ljava/lang/String; = ConnectedDevice
  getContext()Landroid/content/Context; = Context
  setContext(Landroid/content/Context;)V = Context
  getListener()Lkr/neolab/sdk/pen/penmsg/IPenMsgListener; = Listener
  setListener(Lkr/neolab/sdk/pen/penmsg/IPenMsgListener;)V = Listener
  getOffLineDataListener()Lkr/neolab/sdk/pen/penmsg/IOfflineDataListener; = OffLineDataListener
  setOffLineDataListener(Lkr/neolab/sdk/pen/penmsg/IOfflineDataListener;)V = OffLineDataListener
  getProtocolVersion()I = ProtocolVersion
  connect(Ljava/lang/String;)V = Connect(string)
  disconnect()V = Disconnect()
  inputPassword(Ljava/lang/String;)V = InputPassword(string)
  isAvailableDevice(Ljava/lang/String;)Z = IsAvailableDevice(string)
  removeOfflineData(II)V = RemoveOfflineData(int, int)
  removeOfflineData(II[I)V = RemoveOfflineData(int, int, int[])
  reqAddUsingNote(II)V = ReqAddUsingNote(int, int)
  reqAddUsingNote(II[I)V = ReqAddUsingNote(int, int, int[])
  reqAddUsingNote([I[I)V = ReqAddUsingNote(int[], int[])
  reqAddUsingNote(Ljava/util/ArrayList;)V = ReqAddUsingNote(System.Collections.Generic.IList<KR.Neolab.Sdk.Util.UseNoteData>)
  reqAddUsingNoteAll()V = ReqAddUsingNoteAll()
  reqForceCalibrate()V = ReqForceCalibrate()
  reqFwUpgrade(Ljava/io/File;Ljava/lang/String;)V = ReqFwUpgrade(Java.IO.File, string)
  reqFwUpgrade2(Ljava/io/File;Ljava/lang/String;)V = ReqFwUpgrade2(Java.IO.File, string)
  reqOfflineData(III)V = ReqOfflineData(int, int, int)
  reqOfflineData(III[I)V = ReqOfflineData(int, int, int, int[])
  reqOfflineDataList()V = ReqOfflineDataList()
  reqOfflineDataList(II)V = ReqOfflineDataList(int, int)
  reqOfflineDataPageList(III)V = ReqOfflineDataPageList(int, int, int)
  reqPenStatus()V = ReqPenStatus()
  reqSetupAutoPowerOnOff(Z)V = ReqSetupAutoPowerOnOff(bool)
  reqSetupAutoShutdownTime(S)V = ReqSetupAutoShutdownTime(short)
  reqSetupPassword(Ljava/lang/String;Ljava/lang/String;)V = ReqSetupPassword(string, string)
  reqSetUpPasswordOff(Ljava/lang/String;)V = ReqSetUpPasswordOff(string)
  reqSetupPenBeepOnOff(Z)V = ReqSetupPenBeepOnOff(bool)
  reqSetupPenCapOff(Z)V = ReqSetupPenCapOff(bool)
  reqSetupPenHover(Z)V = ReqSetupPenHover(bool)
  reqSetupPenSensitivity(S)V = ReqSetupPenSensitivity(short)
  reqSetupPenTipColor(I)V = ReqSetupPenTipColor(int)
  reqSuspendFwUpgrade()V = ReqSuspendFwUpgrade()
  setAllowOfflineData(Z)V = SetAllowOfflineData(bool)
  setDotListener(Lkr/neolab/sdk/pen/penmsg/IPenDotListener;)V = SetDotListener(KR.Neolab.Sdk.Pen.Penmsg.IPenDotListener)
  setOfflineDataLocation(Ljava/lang/String;)V = SetOfflineDataLocation(string)
  startListen()V = StartListen()
kr/neolab/sdk/pen/IPenCtrl = KR.Neolab.Sdk.Pen.IPenCtrl
  getConnectedDevice()Ljava/lang/String; = ConnectedDevice
  getListener()Lkr/neolab/sdk/pen/penmsg/IPenMsgListener; = Listener
  setListener(Lkr/neolab/sdk/pen/penmsg/IPenMsgListener;)V = Listener
  getOffLineDataListener()Lkr/neolab/sdk/pen/penmsg/IOfflineDataListener; = OffLineDataListener
  setOffLineDataListener(Lkr/neolab/sdk/pen/penmsg/IOfflineDataListener;)V = OffLineDataListener
  getProtocolVersion()I = ProtocolVersion
  getVersion()Ljava/lang/String; = Version
  calibratePen()V = CalibratePen()
  connect(Ljava/lang/String;)V = Connect(string)
  disconnect()V = Disconnect()
  inputPassword(Ljava/lang/String;)V = InputPassword(string)
  isAvailableDevice(Ljava/lang/String;)Z = IsAvailableDevice(string)
  registerBroadcastBTDuplicate()V = RegisterBroadcastBTDuplicate()
  removeOfflineData(II)V = RemoveOfflineData(int, int)
  removeOfflineData(II[I)V = RemoveOfflineData(int, int, int[])
  reqAddUsingNote(II)V = ReqAddUsingNote(int, int)
  reqAddUsingNote(II[I)V = ReqAddUsingNote(int, int, int[])
  reqAddUsingNote([I[I)V = ReqAddUsingNote(int[], int[])
  reqAddUsingNote(Ljava/util/ArrayList;)V = ReqAddUsingNote(System.Collections.Generic.IList<KR.Neolab.Sdk.Util.UseNoteData>)
  reqAddUsingNoteAll()V = ReqAddUsingNoteAll()
  reqOfflineData(III)V = ReqOfflineData(int, int, int)
  reqOfflineData(III[I)V = ReqOfflineData(int, int, int, int[])
  reqOfflineDataList()V = ReqOfflineDataList()
  reqOfflineDataList(II)V = ReqOfflineDataList(int, int)
  reqOfflineDataPageList(III)V = ReqOfflineDataPageList(int, int, int)
  reqPenStatus()V = ReqPenStatus()
  reqSetupAutoPowerOnOff(Z)V = ReqSetupAutoPowerOnOff(bool)
  reqSetupAutoShutdownTime(S)V = ReqSetupAutoShutdownTime(short)
  reqSetupPassword(Ljava/lang/String;Ljava/lang/String;)V = ReqSetupPassword(string, string)
  reqSetUpPasswordOff(Ljava/lang/String;)V = ReqSetUpPasswordOff(string)
  reqSetupPenBeepOnOff(Z)V = ReqSetupPenBeepOnOff(bool)
  reqSetupPenCapOff(Z)V = ReqSetupPenCapOff(bool)
  reqSetupPenHover(Z)V = ReqSetupPenHover(bool)
  reqSetupPenSensitivity(S)V = ReqSetupPenSensitivity(short)
  reqSetupPenTipColor(I)V = ReqSetupPenTipColor(int)
  setAllowOfflineData(Z)V = SetAllowOfflineData(bool)
  setContext(Landroid/content/Context;)V = SetContext(Android.Content.Context)
  setDotListener(Lkr/neolab/sdk/pen/penmsg/IPenDotListener;)V = SetDotListener(KR.Neolab.Sdk.Pen.Penmsg.IPenDotListener)
  setOfflineDataLocation(Ljava/lang/String;)V = SetOfflineDataLocation(string)
  startup()V = Startup()
  suspendPenUpgrade()V = SuspendPenUpgrade()
  unregisterBroadcastBTDuplicate()V = UnregisterBroadcastBTDuplicate()
  upgradePen(Ljava/io/File;)V = UpgradePen(Java.IO.File)
  upgradePen(Ljava/io/File;Ljava/lang/String;)V = UpgradePen(Java.IO.File, string)
  upgradePen2(Ljava/io/File;Ljava/lang/String;)V = UpgradePen2(Java.IO.File, string)
kr/neolab/sdk/pen/offline/OfflineByteData = KR.Neolab.Sdk.Pen.Offline.OfflineByteData
  <init>([Lkr/neolab/sdk/ink/structure/Stroke;III)V = .ctor(KR.Neolab.Sdk.Ink.Structure.Stroke[], int, int, int)
  noteId = NoteId
  ownerId = OwnerId
  sectionId = SectionId
  strokes = Strokes
kr/neolab/sdk/pen/offline/OfflineByteParser = KR.Neolab.Sdk.Pen.Offline.OfflineByteParser
  <init>([B)V = .ctor(byte[])
  onFilteredDot(Lkr/neolab/sdk/pen/filter/Fdot;)V = OnFilteredDot(KR.Neolab.Sdk.Pen.Filter.Fdot)
  parse()Ljava/util/ArrayList; = Parse()
  unzip([BI)[B = Unzip(byte[], int)
kr/neolab/sdk/pen/offline/OfflineFile = KR.Neolab.Sdk.Pen.Offline.OfflineFile
  <init>(IIIZ)V = .ctor(int, int, int, bool)
  <init>(Ljava/lang/String;IZ)V = .ctor(string, int, bool)
  appendCount = AppendCount
  DEFAULT_FILE_FORMAT = DefaultFileFormat
  packetCount = PacketCount
  getCount()I = Count
  getDefaultFilePath()Ljava/lang/String; = DefaultFilePath
  getExternalStoragePath()Ljava/lang/String; = ExternalStoragePath
  getNoteId()I = NoteId
  getOfflineFilePath()Ljava/lang/String; = OfflineFilePath
  getOwnerId()I = OwnerId
  getPageId()I = PageId
  getSectionId()I = SectionId
  append([BI)V = Append(byte[], int)
  clearTempFile()V = ClearTempFile()
  make()Ljava/lang/String; = Make()
  setOfflineFilePath(Ljava/lang/String;)Z = SetOfflineFilePath(string)
kr/neolab/sdk/pen/offline/OfflineFileParser = KR.Neolab.Sdk.Pen.Offline.OfflineFileParser
  <init>(Ljava/io/File;)V = .ctor(Java.IO.File)
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  getDefaultFilePath()Ljava/lang/String; = DefaultFilePath
  getExternalStoragePath()Ljava/lang/String; = ExternalStoragePath
  delete()V = Delete()
  getOfflineFiles()[Ljava/lang/String; = GetOfflineFiles()
  getOfflineFiles(Ljava/lang/String;)[Ljava/lang/String; = GetOfflineFiles(string)
  onFilteredDot(Lkr/neolab/sdk/pen/filter/Fdot;)V = OnFilteredDot(KR.Neolab.Sdk.Pen.Filter.Fdot)
  parse()[Lkr/neolab/sdk/ink/structure/Stroke; = Parse()
kr/neolab/sdk/pen/PenCtrl = KR.Neolab.Sdk.Pen.PenCtrl
  getConnectedDevice()Ljava/lang/String; = ConnectedDevice
  getInstance()Lkr/neolab/sdk/pen/PenCtrl; = Instance
  getListener()Lkr/neolab/sdk/pen/penmsg/IPenMsgListener; = Listener
  setListener(Lkr/neolab/sdk/pen/penmsg/IPenMsgListener;)V = Listener
  getOffLineDataListener()Lkr/neolab/sdk/pen/penmsg/IOfflineDataListener; = OffLineDataListener
  setOffLineDataListener(Lkr/neolab/sdk/pen/penmsg/IOfflineDataListener;)V = OffLineDataListener
  getProtocolVersion()I = ProtocolVersion
  getVersion()Ljava/lang/String; = Version
  calibratePen()V = CalibratePen()
  connect(Ljava/lang/String;)V = Connect(string)
  disconnect()V = Disconnect()
  inputPassword(Ljava/lang/String;)V = InputPassword(string)
  isAvailableDevice(Ljava/lang/String;)Z = IsAvailableDevice(string)
  registerBroadcastBTDuplicate()V = RegisterBroadcastBTDuplicate()
  removeOfflineData(II)V = RemoveOfflineData(int, int)
  removeOfflineData(II[I)V = RemoveOfflineData(int, int, int[])
  reqAddUsingNote(II)V = ReqAddUsingNote(int, int)
  reqAddUsingNote(II[I)V = ReqAddUsingNote(int, int, int[])
  reqAddUsingNote([I[I)V = ReqAddUsingNote(int[], int[])
  reqAddUsingNote(Ljava/util/ArrayList;)V = ReqAddUsingNote(System.Collections.Generic.IList<KR.Neolab.Sdk.Util.UseNoteData>)
  reqAddUsingNoteAll()V = ReqAddUsingNoteAll()
  reqOfflineData(III)V = ReqOfflineData(int, int, int)
  reqOfflineData(III[I)V = ReqOfflineData(int, int, int, int[])
  reqOfflineDataList()V = ReqOfflineDataList()
  reqOfflineDataList(II)V = ReqOfflineDataList(int, int)
  reqOfflineDataPageList(III)V = ReqOfflineDataPageList(int, int, int)
  reqPenStatus()V = ReqPenStatus()
  reqSetupAutoPowerOnOff(Z)V = ReqSetupAutoPowerOnOff(bool)
  reqSetupAutoShutdownTime(S)V = ReqSetupAutoShutdownTime(short)
  reqSetupPassword(Ljava/lang/String;Ljava/lang/String;)V = ReqSetupPassword(string, string)
  reqSetUpPasswordOff(Ljava/lang/String;)V = ReqSetUpPasswordOff(string)
  reqSetupPenBeepOnOff(Z)V = ReqSetupPenBeepOnOff(bool)
  reqSetupPenCapOff(Z)V = ReqSetupPenCapOff(bool)
  reqSetupPenHover(Z)V = ReqSetupPenHover(bool)
  reqSetupPenSensitivity(S)V = ReqSetupPenSensitivity(short)
  reqSetupPenTipColor(I)V = ReqSetupPenTipColor(int)
  setAllowOfflineData(Z)V = SetAllowOfflineData(bool)
  setContext(Landroid/content/Context;)V = SetContext(Android.Content.Context)
  setDotListener(Lkr/neolab/sdk/pen/penmsg/IPenDotListener;)V = SetDotListener(KR.Neolab.Sdk.Pen.Penmsg.IPenDotListener)
  setOfflineDataLocation(Ljava/lang/String;)V = SetOfflineDataLocation(string)
  startup()V = Startup()
  suspendPenUpgrade()V = SuspendPenUpgrade()
  unregisterBroadcastBTDuplicate()V = UnregisterBroadcastBTDuplicate()
  upgradePen(Ljava/io/File;)V = UpgradePen(Java.IO.File)
  upgradePen(Ljava/io/File;Ljava/lang/String;)V = UpgradePen(Java.IO.File, string)
  upgradePen2(Ljava/io/File;Ljava/lang/String;)V = UpgradePen2(Java.IO.File, string)
kr/neolab/sdk/pen/penmsg/IOfflineDataListener = KR.Neolab.Sdk.Pen.Penmsg.IOfflineDataListener
  onReceiveOfflineStrokes([Lkr/neolab/sdk/ink/structure/Stroke;III)V = OnReceiveOfflineStrokes(KR.Neolab.Sdk.Ink.Structure.Stroke[], int, int, int)
kr/neolab/sdk/pen/penmsg/IPenDotListener = KR.Neolab.Sdk.Pen.Penmsg.IPenDotListener
  onReceiveDot(Lkr/neolab/sdk/ink/structure/Dot;)V = OnReceiveDot(KR.Neolab.Sdk.Ink.Structure.Dot)
kr/neolab/sdk/pen/penmsg/IPenMsgListener = KR.Neolab.Sdk.Pen.Penmsg.IPenMsgListener
  onReceiveMessage(Lkr/neolab/sdk/pen/penmsg/PenMsg;)V = OnReceiveMessage(KR.Neolab.Sdk.Pen.Penmsg.PenMsg)
kr/neolab/sdk/pen/penmsg/JsonTag = KR.Neolab.Sdk.Pen.Penmsg.JsonTag
  <init>()V = .ctor()
  BOOL_ACCELERATION_SENSOR = BoolAccelerationSensor
  BOOL_AUTO_POWER_ON = BoolAutoPowerOn
  BOOL_BEEP = BoolBeep
  BOOL_HOVER = BoolHover
  BOOL_OFFLINEDATA_SAVE = BoolOfflinedataSave
  BOOL_PENCAP_OFF = BoolPencapOff
  BOOL_REGULAR_DISCONNECT = BoolRegularDisconnect
  BOOL_RESULT = BoolResult
  INT_AUTO_POWER_OFF_TIME = IntAutoPowerOffTime
  INT_BATTERY_STATUS = IntBatteryStatus
  INT_MAX_FORCE = IntMaxForce
  INT_MEMORY_STATUS = IntMemoryStatus
  INT_NOTE_ID = IntNoteId
  INT_OWNER_ID = IntOwnerId
  INT_PAGE_ID = IntPageId
  INT_PASSWORD_RESET_COUNT = IntPasswordResetCount
  INT_PASSWORD_RETRY_COUNT = IntPasswordRetryCount
  INT_PEN_COLOR = IntPenColor
  INT_PEN_SENSITIVITY = IntPenSensitivity
  INT_POWER_OFF_REASON = IntPowerOffReason
  INT_RECEIVED_SIZE = IntReceivedSize
  INT_SECTION_ID = IntSectionId
  INT_SENT_SIZE = IntSentSize
  INT_TIMEZONE_OFFSET = IntTimezoneOffset
  INT_TOTAL_SIZE = IntTotalSize
  LONG_TIMETICK = LongTimetick
  STRING_DEVICE_NAME = StringDeviceName
  STRING_FILE_PATH = StringFilePath
  STRING_PEN_FW_VERSION = StringPenFwVersion
  STRING_PROTOCOL_VERSION = StringProtocolVersion
  STRING_STATUS = StringStatus
  STRING_SUB_NAME = StringSubName
kr/neolab/sdk/pen/penmsg/PenMsg = KR.Neolab.Sdk.Pen.Penmsg.PenMsg
  <init>(I)V = .ctor(int)
  <init>(I[Ljava/lang/String;[Ljava/lang/String;)V = .ctor(int, string[], string[])
  <init>(ILjava/lang/String;)V = .ctor(int, string)
  <init>(ILjava/lang/String;Ljava/lang/String;)V = .ctor(int, string, string)
  <init>(ILorg/json/JSONArray;)V = .ctor(int, Org.Json.JSONArray)
  <init>(ILorg/json/JSONObject;)V = .ctor(int, Org.Json.JSONObject)
  content = Content
  mac_address = MacAddress
  penMsgType = PenMsgType
  getContent()Ljava/lang/String; = Content
  getContentByJSONArray()Lorg/json/JSONArray; = ContentByJSONArray
  getContentByJSONObject()Lorg/json/JSONObject; = ContentByJSONObject
  getPenMsgType()I = PenMsgType
  getContentByJSONArray(Ljava/lang/String;)Lorg/json/JSONArray; = GetContentByJSONArray(string)
  getContentByJSONObject(Ljava/lang/String;)Lorg/json/JSONObject; = GetContentByJSONObject(string)
  toJSONString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = ToJSONString(string, string)
  toJSONString([Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String; = ToJSONString(string[], string[])
  toJSONString(Ljava/util/LinkedHashMap;)Ljava/lang/String; = ToJSONString(Java.Util.LinkedHashMap)
  toJSONString(Lorg/json/JSONArray;)Ljava/lang/String; = ToJSONString(Org.Json.JSONArray)
  toJSONString(Lorg/json/JSONObject;)Ljava/lang/String; = ToJSONString(Org.Json.JSONObject)
kr/neolab/sdk/pen/penmsg/PenMsgType = KR.Neolab.Sdk.Pen.Penmsg.PenMsgType
  <init>()V = .ctor()
  EVENT_LOW_BATTERY = EventLowBattery
  EVENT_POWER_OFF = EventPowerOff
  OFFLINE_DATA_FILE_CREATED = OfflineDataFileCreated
  OFFLINE_DATA_FILE_DELETED = OfflineDataFileDeleted
  OFFLINE_DATA_NOTE_LIST = OfflineDataNoteList
  OFFLINE_DATA_PAGE_LIST = OfflineDataPageList
  OFFLINE_DATA_SEND_FAILURE = OfflineDataSendFailure
  OFFLINE_DATA_SEND_START = OfflineDataSendStart
  OFFLINE_DATA_SEND_STATUS = OfflineDataSendStatus
  OFFLINE_DATA_SEND_SUCCESS = OfflineDataSendSuccess
  PASSWORD_REQUEST = PasswordRequest
  PASSWORD_SETUP_FAILURE = PasswordSetupFailure
  PASSWORD_SETUP_SUCCESS = PasswordSetupSuccess
  PEN_ACTION_GESTURE = PenActionGesture
  PEN_ALREADY_CONNECTED = PenAlreadyConnected
  PEN_AUTHORIZED = PenAuthorized
  PEN_CALIBRATION_FINISH = PenCalibrationFinish
  PEN_CALIBRATION_START = PenCalibrationStart
  PEN_CONNECTION_FAILURE = PenConnectionFailure
  PEN_CONNECTION_FAILURE_BTDUPLICATE = PenConnectionFailureBtduplicate
  PEN_CONNECTION_SUCCESS = PenConnectionSuccess
  PEN_CONNECTION_TRY = PenConnectionTry
  PEN_DISCONNECTED = PenDisconnected
  PEN_FW_UPGRADE_FAILURE = PenFwUpgradeFailure
  PEN_FW_UPGRADE_STATUS = PenFwUpgradeStatus
  PEN_FW_UPGRADE_SUCCESS = PenFwUpgradeSuccess
  PEN_FW_UPGRADE_SUSPEND = PenFwUpgradeSuspend
  PEN_FW_VERSION = PenFwVersion
  PEN_SETUP_AUTO_POWER_ON_RESULT = PenSetupAutoPowerOnResult
  PEN_SETUP_AUTO_SHUTDOWN_RESULT = PenSetupAutoShutdownResult
  PEN_SETUP_BEEP_RESULT = PenSetupBeepResult
  PEN_SETUP_FAILURE = PenSetupFailure
  PEN_SETUP_HOVER_ONOFF = PenSetupHoverOnoff
  PEN_SETUP_OFFLINEDATA_SAVE_ONOFF = PenSetupOfflinedataSaveOnoff
  PEN_SETUP_PEN_CAP_OFF = PenSetupPenCapOff
  PEN_SETUP_PEN_COLOR_RESULT = PenSetupPenColorResult
  PEN_SETUP_SENSITIVITY_RESULT = PenSetupSensitivityResult
  PEN_SETUP_SUCCESS = PenSetupSuccess
  PEN_STATUS = PenStatus
kr/neolab/sdk/util/KeyEncoder = KR.Neolab.Sdk.Util.KeyEncoder
  <init>()V = .ctor()
  makeMasterKey(Ljava/lang/String;)Ljava/lang/String; = MakeMasterKey(string)
kr/neolab/sdk/util/NLog = KR.Neolab.Sdk.Util.NLog
  <init>()V = .ctor()
  UseExternalLogger = UseExternalLogger
  d(Ljava/lang/String;)V = D(string)
  d(Ljava/lang/String;Ljava/lang/String;)V = D(string, string)
  e(Ljava/lang/String;)V = E(string)
  e(Ljava/lang/String;Ljava/lang/Exception;)V = E(string, Java.Lang.Exception)
  i(Ljava/lang/String;)V = I(string)
  i(Ljava/lang/String;Ljava/lang/String;)V = I(string, string)
  w(Ljava/lang/String;)V = W(string)
  w(Ljava/lang/String;Ljava/lang/String;)V = W(string, string)
kr/neolab/sdk/util/Profiler = KR.Neolab.Sdk.Util.Profiler
  <init>(Lkr/neolab/sdk/util/Profiler$ProfileType;)V = .ctor(KR.Neolab.Sdk.Util.Profiler.ProfileType)
  pType = PType
  lap(Ljava/lang/String;)V = Lap(string)
  release()V = Release()
  report()V = Report()
  start()V = Start()
  stop()V = Stop()
kr/neolab/sdk/util/SDKVersion = KR.Neolab.Sdk.Util.SDKVersion
  <init>()V = .ctor()
  version = Version
kr/neolab/sdk/util/TimeUtil = KR.Neolab.Sdk.Util.TimeUtil
  <init>()V = .ctor()
  convertLocalTimeToUTC(J)J = ConvertLocalTimeToUTC(long)
  convertUTCToLocalTime(J)J = ConvertUTCToLocalTime(long)
kr/neolab/sdk/util/UseNoteData = KR.Neolab.Sdk.Util.UseNoteData
  <init>()V = .ctor()
  noteIds = NoteIds
  ownerId = OwnerId
  sectionId = SectionId
